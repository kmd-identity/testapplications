@model KMD.Identity.TestApplications.OpenID.MVCCore.Models.Delegation.DelegationViewModel
@using KMD.Identity.TestApplications.OpenID.MVCCore.Extensions
@{
    ViewData["Title"] = "Delegation";
}

<div class="row">
    <input type="button" id="bInstructions" class="btn btn-info" value="Show information and instructions"/>
</div>

<div class="container" id="dInstructions" style="display: none">
    <div class="row">
        <h3>Overview</h3>
    </div>
    <div class="row">
        <p>This page is a workspace for testing delegation using KMD Identity. For more information about delegation visit <a href="https://github.com/kmd-identity/documentation/wiki">KMD Identity documentation</a></p>
    </div>
    <div class="row">
        <h3>Scenario</h3>
    </div>
    <div class="row">
        <p>Lets assume we have a Citizen who wants to pay for something. For some reason this operation is not permitted for him.</p>
        <p>Citizen can ask Case Worker to perform this operation on behalf of him.</p>
        <p>To allow that, Citizen must delegate access for Case Worker.</p>
        <p>When access is delegated, then Case Worker can act on behalf of Citizen and complete the payment.</p>
    </div>
    <div class="row">
        <h3>Setup for Citizen</h3>
    </div>
    <div class="row">
        <ul>
            <li>Logout from current session.</li>
            <li>Start new login flow and select KMD Identity TestIdP to login with.</li>
            <li>When presented with the TestIdP UI add claim called <b>Role</b> with value <b>Citizen</b>.</li>
            <li>After successful login navigate to this page and your will be presented with Citizen UI.</li>
        </ul>
    </div>
    <div class="row">
        <h3>Setup for Case Worker</h3>
    </div>
    <div class="row">
        <ul>
            <li>Logout from current session (or if you want to test Citizen and Case Worker on the same machine, then open another browser window).</li>
            <li>Start new login flow and select KMD Identity TestIdP to login with.</li>
            <li>When presented with the TestIdP UI add claim called <b>Role</b> with value <b>CaseWorker</b>.</li>
            <li>After successful login navigate to this page and your will be presented with Case Worker UI.</li>
        </ul>
    </div>
</div>

@if (Model.HasError)
{
    @foreach (var error in Model.Errors)
    {
        <div class="alert alert-danger" role="alert">
            @Html.Raw(@error)
        </div>
    }
}

@if (Model.HasMessages)
{
    @foreach (var msg in Model.Messages)
    {
        <div class="alert alert-primary" role="alert">
            @Html.Raw(@msg)
        </div>
    }
}

@if (User.HasRole("Citizen"))
{
    <h2><b>Your now a Citizen (@User.GetClaimValue("email"))</b></h2>
    <div class="row">
        <div class="col-8"></div>
        <div class="col-2"><a id="btnDelegateAccess" class="btn btn-primary m-2" href='@Url.Action("DelegateAccess", "Delegation")'>Delegate Access</a></div>
        <div class="col-2"><a id="btnCleanupDelegation" class="btn btn-primary m-2" href='@Url.Action("Cleanup", "Delegation")'>Cleanup Access Delegation</a></div>
    </div>
    <h2>Delegated access</h2>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Flow ID</th>
                <th scope="col">Status</th>
                <th scope="col">Delegated At</th>
                <th scope="col">Revoked At</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ud in Model.DelegatedAccess.OrderByDescending(c => c.DelegatedAt ?? DateTime.MaxValue))
            {
                <tr>
                    <td>@ud.FlowId</td>
                    <td>@ud.Status.ToString()</td>
                    <td>@(ud.DelegatedAt.HasValue ? ud.DelegatedAt.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm") : "")</td>
                    <td>@(ud.RevokedAt.HasValue ? ud.RevokedAt.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm") : "")</td>
                    <td>
                        @*  @if (ud.Status != AccessDelegationStatus.Revoked)
                {
                <a id="btnRevokeAccess_@ud.AccessDelegationId" class="btn btn-sm btn-secondary btnRevokeAccess" href='@Url.Action("RevokeAccess", "Delegation", new { accessDelegationId = @ud.AccessDelegationId })'>Revoke</a>
                } *@
                        <a class="btn btn-sm btn-secondary btnRevokeAccess" href='@Url.Action("RevokeAccess", "Delegation", new { accessDelegationId = @ud.AccessDelegationId })'>Revoke</a>
                        <a class="btn btn-sm btn-secondary btnShowAudit" href='@Url.Action("AuditInformation", "Delegation", new { accessDelegationId = @ud.AccessDelegationId })'>Show Audit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (User.HasRole("CaseWorker"))
{
    <h2><b>Your now a Case Worker (@User.GetClaimValue("email")) @(User.IsOperatingOnBehalf() ? $"Acting as {User.GetClaimValue("delegationsub")}" : string.Empty)</b></h2>
    <div class="row">
        <div class="col-10"></div>
        <div class="col-2"><a id="btnCleanupDelegationActor" class="btn btn-primary m-2" href='@Url.Action("Cleanup", "Delegation")'>Cleanup Access Delegation</a></div>
    </div>
    <h2>List of delegated access</h2>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Who</th>
                <th scope="col">Flow ID</th>
                <th scope="col">Status</th>
                <th scope="col">Delegated At</th>
                <th scope="col">Revoked At</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ud in Model.DelegatedAccess.OrderByDescending(c => c.DelegatedAt ?? DateTime.MaxValue))
            {
                <tr>
                    <td>@ud.UserData.Sub</td>
                    <td>@ud.FlowId</td>
                    <td>@ud.Status.ToString()</td>
                    <td>@(ud.DelegatedAt.HasValue ? ud.DelegatedAt.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm") : "")</td>
                    <td>@(ud.RevokedAt.HasValue ? ud.RevokedAt.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm") : "")</td>
                    <td>
                        @* @if (ud.Status != AccessDelegationStatus.Revoked)
                {
                <a id="btnRevokeAccess_@ud.AccessDelegationId" class="btn btn-sm btn-secondary btnRevokeAccess" href='@Url.Action("RevokeAccess", "Delegation", new { accessDelegationId = @ud.AccessDelegationId })'>Revoke</a>
                }
                @if (ud.Status == AccessDelegationStatus.Delegated)
                {
                <a id="btnAct_@ud.AccessDelegationId" class="btn btn-sm btn-secondary btnAct" href='@Url.Action("Act", "Delegation", new { accessDelegationId = @ud.AccessDelegationId })'>Act</a>
                } *@
                        <a class="btn btn-sm btn-secondary btnRevokeAccess" href='@Url.Action("RevokeAccess", "Delegation", new { accessDelegationId = @ud.AccessDelegationId })'>Revoke</a>
                        <a class="btn btn-sm btn-secondary btnAct" href='@Url.Action("Act", "Delegation", new { accessDelegationId = @ud.AccessDelegationId })'>Act</a>
                        <a class="btn btn-sm btn-secondary btnShowAudit" href='@Url.Action("AuditInformation", "Delegation", new { accessDelegationId = @ud.AccessDelegationId })'>Show Audit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div id="auditContainer" class="row">
</div>

@if (User.HasRole("Citizen") || Model.OperatesOnBehalf)
{
    <h2>Financial operation (demonstration of operation on behalf)</h2>
    <div class="row">
        This operation for some reason cannot be completed by Citizen (Subject). Only Case Worker (Actor) acting on behalf Citizen (Subject) can do it.
    </div>
    <div class="row">
        <a class="btn btn-secondary bntPayments m-2" href='@Url.Action("Pay", "Delegation")'>Make a Payment</a>
        <a class="btn btn-secondary bntPayments m-2" href='@Url.Action("GetPayments", "Delegation")'>Get Payments</a>
    </div>
    <div id="payResult" class="row">
    </div>
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">

    function toggleInstructions() {
        $("#dInstructions").toggle();

        if ($("#dInstructions").is(":visible")) {
            $("#bInstructions").val('Hide information and instructions');
        }
        else {
            $("#bInstructions").val('Show information and instructions');
        }
    }

    $(function () {

        $("#btnDelegateAccess").on("click", function (e) {
            var link = this;

            e.preventDefault();

            if (confirm("Are you sure you want to Delegate Access?\nThis will cause you to re-login.")) {
                window.location = link.href;
            }
        });

        $(".btnRevokeAccess").on("click", function (e) {
            var link = this;

            e.preventDefault();

            if (confirm("Are you sure you want to Revoke Access?")) {
                window.location = link.href;
            }
        });

        $(".btnAct").on("click", function (e) {
            var link = this;

            e.preventDefault();

            if (confirm("Are you sure you want to Act on Behalf of Subject?")) {
                window.location = link.href;
            }
        });

        $(".btnShowAudit").on("click", function (e) {
            var link = this;

            e.preventDefault();

            $("#auditContainer").load(link.href);
        });

        $(".bntPayments").on("click", function (e) {
            var link = this;

            e.preventDefault();

            $("#payResult").load(link.href);
        });

        $("#btnCleanupDelegation").on("click", function (e) {
            var link = this;

            e.preventDefault();

            if (confirm("Are you sure you want to do cleanup? This will remove all data related to current Subject.")) {
                window.location = link.href;
            }
        });

        $("#btnCleanupDelegationActor").on("click", function (e) {
            var link = this;

            e.preventDefault();

            if (confirm("Are you sure you want to do cleanup? This will remove all data related to all Subjects.")) {
                window.location = link.href;
            }
        });

        $("#bInstructions").on("click", function (e) {
            toggleInstructions();
        });
        
        @if (!User.HasRole("Citizen") && !User.HasRole("CaseWorker"))
        {
            @Html.Raw(" toggleInstructions();")
        }
    });

</script>